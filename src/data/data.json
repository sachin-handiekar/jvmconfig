{
  "JVMVendor": {
    "id": "jvmVendor",
    "children": [
      {
        "value": "Oracle",
        "disabled": false
      },
      {
        "value": "OpenJDK (not implemented)",
        "disabled": true
      },
      {
        "value": "IBM (not implemented)",
        "disabled": true
      }
    ],
    "tooltip": "JVM Vendor"
  },
  "JDKVersion": {
    "id": "jdkVersion",
    "children": [
      {
        "value": "6/7"
      },
      {
        "value": "8"
      }
    ],
    "tooltip": "JDK Version"
  },
  "debugging": {
    "id": "debugging",
    "children": [
      {
        "id": "printGCDetails",
        "text": "Enable GC Logging ",
        "value": "-XX:+PrintGCDetails",
        "tooltip": "Print GC Details"
      },
      {
        "id": "enableGCLogRotation",
        "text": "Enable GC Log Rotation ",
        "value": "-Xloggc:gc.log.'date +%Y%m%d%H%M%S' -XX:+UseGCLogFileRotation",
        "tooltip": "Enable GC Log Rotation"
      },
      {
        "id": "heapDumpOnOOMemory",
        "text": "Enable HeapDump on OutOfMemoryError",
        "value": "-XX:-HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp/heapDump.hprof",
        "tooltip": "Heap dump on OutOfMemory Error"
      },
      {
        "id": "enableErrorFile",
        "text": "Save Error data on a file ",
        "value": "-XX:ErrorFile=/path/to/error_file.log",
        "tooltip": "If an error occurs, save the error data to this file."
      },
      {
        "id": "verboseJNI",
        "text": "Verbose logging of JNI ",
        "value": "-verbose:jni",
        "tooltip": "When a JNI or native method is resolved, the HotSpot VM prints a trace message to the application console (standard output). It also prints a trace message when a native method is registered using the JNI RegisterNative function. "
      },
      {
        "id": "verboseGC",
        "text": "Verbose logging of garbage collection (GC) information",
        "value": "-verbose:gc",
        "tooltip": "The -verbose:gc option enables logging of garbage collection (GC) information. It can be combined with other HotSpot VM specific options such as -XX:+PrintGCDetails and -XX:+PrintGCTimeStamps to get further information about the GC. The information output includes the size of the generations before and after each GC, total size of the heap, the size of objects promoted, and the time taken."
      },
      {
        "id": "verboseClass",
        "text": "Verbose logging of class loading and unloading",
        "value": "-verbose:class",
        "tooltip": "The -verbose:class option enables logging of class loading and unloading."
      },
      {
        "id": "printGCApplicationConcurrentTime",
        "text": "Print GC Application Concurrent Time",
        "value": "-XX:+PrintGCApplicationConcurrentTime",
        "tooltip": "Print the time the application has been running"
      },
      {
        "id": "printGCApplicationStoppedTime",
        "text": "Print GC Application Stopped Time ",
        "value": "-XX:+PrintGCApplicationStoppedTime",
        "tooltip": "Print the time the application has been stopped"
      },
      {
        "id": "printAssembly",
        "text": "Print assembly",
        "value": "-XX:+PrintAssembly",
        "tooltip": "Print assembly code for bytecoded and native methods."
      },
      {
        "id": "printClassHistogram",
        "text": "Print class histogram",
        "value": "-XX:+PrintClassHistogram",
        "tooltip": "Print a histogram of class instances"
      },
      {
        "id": "printConcurrentLocks",
        "text": "Print Concurrent Locks ",
        "value": "-XX:+PrintConcurrentLocks",
        "tooltip": "Print java.util.concurrent locks in thread dump"
      }
    ]
  },
  "performance": {
    "id": "performance",
    "children": [
      {
        "id": "aggressiveOpts",
        "text": "Enable Aggresive Opts",
        "value": "-XX:+AggressiveOpts",
        "tooltip": "Enable Aggresive Opts"
      },
      {
        "id": "largePages",
        "text": "Enable Large Pages",
        "value": "-XX:+UseLargePages",
        "tooltip": "Enable Large Pages"
      },
      {
        "id": "stringCache",
        "text": "Use String Cache",
        "value": "-XX:+UseStringCache",
        "tooltip": "Enables caching of commonly allocated strings"
      },
      {
        "id": "compressedStrings",
        "text": "Use Compressed Strings",
        "value": "-XX:+UseCompressedStrings",
        "tooltip": "Use a byte[] for Strings which can be represented as pure ASCII."
      },
      {
        "id": "optimizeStringConcat",
        "text": "Optimize String concatenation",
        "value": "-XX:+OptimizeStringConcat",
        "tooltip": "Optimize String concatenation operations where possible."
      }
    ]
  },
  "garbageCollector": {
    "id": "garbageCollector",
    "text": "GC Collector",
    "children": [
      {
        "id": "default",
        "value": "default",
        "text": "Default"
      },
      {
        "id": "cms",
        "value": "cms",
        "text": "CMS (low pause)"
      },
      {
        "id": "parallel",
        "value": "parallel",
        "text": "Parallel (throughput)"
      },
      {
        "id": "g1",
        "value": "g1",
        "text": "G1 (low pause)",
        "optionsTitle": "Garbage First (G1) Garbage Collection Options",
        "options": [
          {
            "id": "g1gcMaxGCPauseTime",
            "text": "Set Max. GC pause time ",
            "value": "-XX:MaxGCPauseMillis=",
            "tooltip": "Sets a target for the maximum GC pause time. This is a soft goal, and the JVM will make its best effort to achieve it."
          },
          {
            "id": "g1gcInitiatingHeapOccupancyPercent",
            "text": "Initiating Heap Occupancy Percent",
            "value": "-XX:InitiatingHeapOccupancyPercent=",
            "tooltip": "Percentage of the (entire) heap occupancy to start a concurrent GC cycle. It is used by GCs that trigger a concurrent GC cycle based on the occupancy of the entire heap, not just one of the generations (e.g., G1). A value of 0 denotes 'do constant GC cycles'. The default value is 45."
          },
          {
            "id": "g1gcNewRatio",
            "text": "New Ratio",
            "value": "-XX:NewRatio=",
            "tooltip": "Ratio of old/new generation sizes. The default value is 2."
          },
          {
            "id": "g1gcSurvivorRatio",
            "text": "Survivor Ratio",
            "value": "-XX:SurvivorRatio=",
            "tooltip": "Ratio of eden/survivor space size. The default value is 8."
          },
          {
            "id": "g1gcMaxTenuringThreshold",
            "text": "Set Max. Tenuring Threshold ",
            "value": "-XX:MaxTenuringThreshold=",
            "tooltip": "Maximum value for tenuring threshold. The default value is 15."
          },
          {
            "id": "g1gcParallelGCThreads",
            "text": "Parallel GC Threads",
            "value": "-XX:ParallelGCThreads=",
            "tooltip": "Sets the number of threads used during parallel phases of the garbage collectors. The default value varies with the platform on which the JVM is running."
          },
          {
            "id": "g1gcConcGCThreads",
            "text": "Concurrent GC Threads",
            "value": "-XX:ConcGCThreads=",
            "tooltip": "Number of threads concurrent garbage collectors will use. The default value varies with the platform on which the JVM is running."
          },
          {
            "id": "g1gcG1ReservePercent",
            "text": "G1 Reserve Percent",
            "value": "-XX:G1ReservePercent=",
            "tooltip": "Sets the amount of heap that is reserved as a false ceiling to reduce the possibility of promotion failure. The default value is 10."
          },
          {
            "id": "g1gcG1HeapRegionSize",
            "text": "G1 Heap Region Size",
            "value": "-XX:G1HeapRegionSize=",
            "tooltip": "With G1 the Java heap is subdivided into uniformly sized regions. This sets the size of the individual sub-divisions. The default value of this parameter is determined ergonomically based upon heap size. The minimum value is 1Mb and the maximum value is 32Mb."
          }
        ]
      }
    ],
    "tooltip": "GC Collector Algorithm"
  },
  "additional": {
    "id": "additional",
    "text": "Hashcode algorithm",
    "children": [
      {
        "id": "default",
        "value": "",
        "text": "default"
      },
      {
        "id": "parkMiller",
        "value": 0,
        "text": "Park-Miller RNG (default until Java 7)"
      },
      {
        "id": "globalState",
        "value": 1,
        "text": "f (address, global state)"
      },
      {
        "id": "const",
        "value": 2,
        "text": "Const 1"
      },
      {
        "id": "sequenceCounter",
        "value": 3,
        "text": "Sequence Counter"
      },
      {
        "id": "objectAddress",
        "value": 4,
        "text": "Object address"
      },
      {
        "id": "threadLocal",
        "value": 5,
        "text": "Thread-local Xorshift"
      }
    ]
  },
  "configuration": {
    "minHeapSize": "-Xms",
    "maxHeapSize": "-Xmx",
    "defaultPermSize": "-XX:PermSize=",
    "maxPermSize": "-XX:MaxPermSize=",
    "defaultMetaspace": "-XX:MetaspaceSize=",
    "maxMetaSpace": "-XX:MaxMetaspaceSize=",
    "g1": "-XX:+UseG1GC",
    "cms": "-XX:+UseConcMarkSweepGC",
    "parallel": "-XX:+UseParNewGC -XX:+UseConcMarkSweepGC",
    "printGCDetails": "-XX:+PrintGCDetails",
    "enableGCLogRotation": "-Xloggc:gc.log.'date +%Y%m%d%H%M%S' -XX:+UseGCLogFileRotation",
    "heapDumpOnOOMemory": "-XX:-HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp/heapDump.hprof",
    "enableErrorFile": "-XX:ErrorFile=/path/to/error_file.log",
    "verboseJNI": "-verbose:jni",
    "verboseGC": "-verbose:gc",
    "verboseClass": "-verbose:class",
    "printGCApplicationConcurrentTime": "-XX:+PrintGCApplicationConcurrentTime",
    "printGCApplicationStoppedTime": "-XX:+PrintGCApplicationStoppedTime",
    "printAssembly": "-XX:+PrintAssembly",
    "printClassHistogram": "-XX:+PrintClassHistogram",
    "printConcurrentLocks": "-XX:+PrintConcurrentLocks",
    "hashCodeAlgo": "-XX:hashCode=",
    "aggressiveOpts": "-XX:+AggressiveOpts",
    "largePages": "-XX:+UseLargePages",
    "stringCache": "-XX:+UseStringCache",
    "compressedStrings": "-XX:+UseCompressedStrings",
    "optimizeStringConcat": "-XX:+OptimizeStringConcat",
    "g1gcMaxGCPauseTime": "-XX:MaxGCPauseMillis=",
    "g1gcInitiatingHeapOccupancyPercent": "-XX:InitiatingHeapOccupancyPercent=",
    "g1gcNewRatio": "-XX:NewRatio=",
    "g1gcSurvivorRatio": "-XX:SurvivorRatio=",
    "g1gcMaxTenuringThreshold": "-XX:MaxTenuringThreshold=",
    "g1gcParallelGCThreads": "-XX:ParallelGCThreads=",
    "g1gcConcGCThreads": "-XX:ConcGCThreads=",
    "g1gcG1ReservePercent": "-XX:G1ReservePercent=",
    "g1gcG1HeapRegionSize": "-XX:G1HeapRegionSize="
  }
}
